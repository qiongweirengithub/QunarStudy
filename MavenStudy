MavenStudy
1. 项目管理工具，依赖管理，项目信息管理
2. 控制目录的结构和生命周期
3. pom.xml 是 maven 系统的基本单元

1. 组装PC和品牌PC
2. IDE 不是万能的
3. 不重复再轮子
4. 约定由于配置
    4.1 ArcheType 原型， 结构设计
    4.2 POM 项目对象模型， 对象化



手动创建 maven 项目
    1. 创建目录结构
    2. 创建POM 文件
    3. 创建测试代码
    4. 使用maven命令测试
目录结构：
    1. pom 文件
    2. src 文件夹
        1. main 文件夹
            1. java文件夹
            2. resource 文件夹
        2. test 文件夹
            1. java
            2. resources

测试maven项目 的指令：
    maven  test 
清理编译生成的目录或者文件 指令
    maven clean

手动创建maven项目
    根据文件结构一次创建相应的文件


使用 maven archetype:generate 创建项目

常用命令：
    1. 编译源代码  mvn compile
    2. 编译测试代码  mvn test-compile
    3. 运行测试     mvn test
    4. 打包        mvn package
    5. 在本地 repository 中安装 jar:  mvn install
    6. 在远程仓库中安装 jar ：         mvn deploy
    7. 清除产生的项目                 mvn clean 
    8. 窥探 SuperPom                mvn help:effective-pom, 查看父POM文件
    9. maven 依赖树                  mvn dependency:tree
    10. 打包的时候过滤                mvn clean package -Pdev -Dmaven.test.skip=true
                                        清除   打包并关联Pdev环境(??)  设置过滤
    11. mvn -U clean package -Pbetamagic 
            -Dmaven.test.skip=true
            -DcheckDeployRelease_skip=true
            -Denforcer.skip=false
            -DskipTests enforcer:enforce dependency:tree
            -Dverbose
            
maven test 完成的任务：
    1. 编译源代码
    2. 编译测试代码
    3. 运行测试代码
     
    
maven test-compile 完成的任务：
    1. 编译源代码
    2. 编译测试代码

maven package :
    编译并打包工程，输出再 target 目录下。
    生成的文件和文件夹有：
        classes, maven-archiver, *.jar, surefire, surefire-report, test-classed .
        
maven install：
    将 package 生成的 jar 包部署到本地，输出信息的关键词：  Installing    

            
构建的生命周期：
    定义一组 阶段的序列，每组阶段(即某一个完整的生命周期)定义了目标被执行的顺序，每个阶段是生命周期的一部分。
 maven 构建生命周期：
    maven 构建工程的时候，会按照定义的阶段序列的顺序 执行每个阶段 注册的目标，maven 有3个 标准的 相互独立的 生命周期
        1. clean LifeCycle
        2. default(or build) LifeCycle
        3. site LifeCycle
 
 每个生命周期分为几个阶段
    maven clean:
        1. mvn pre-clean      准备
        2. mvn clean          删除
        2. mvn post-clean     后续工作


default LifeCycle: 共7个步骤, 23个阶段, 执行每个阶段都是有提示输出到屏幕。
    1. mvn pre-resources   准备资源
        复制资源(resource文件下)到target目录下，
    2. mvn compile         编译源文件
        将源文件编译到 target 下的 classes 下， 
    3. mvn test-compile    编译 test 路径下的代码
        只编译 test 路径下的源文件，到 test-classes 文件夹下
    4. mvn test            执行 test 代码
        运行test-classes 下的 文件
    5. mvn package         对编译后的代码进行打包
        将编译好的文件打包到 jar 文件中。
    6. mvn install         将打包后的资源文件部署到本地仓库
        将打包的文件部署到本地仓库
    7. mvn deploy          将打包后的资源文件部署到远程仓库
    
    
site LifeCycle： 分为4个阶段：
    maven站点，项目资源文件和描述文件都放在一个站点之下，其他用户可以通过访问我们的站点对我们的资源进行访问
    开源项目都会有自己的站点，说明项目的 资源和 API 使用方法。
    1. mvn pre-site 
        对工程进行扫描
    2. mvn site
        下载插件，生成 site 相关文件，html描述文件等等,
    3. mvn post-site
        后续文件        
    4. mvn site-deploy， 站点部署，qunar不用，感兴趣访问：
                http://blog.csdn.net/cruise_h/article/details/17188399
        
Idea maven  配置
    1. file -> setting -> BUild,Execution   ->  Build Tools   ->  Maven 
        1. Maven home directory
        2. user setting file
        3. local repository
groupid:
    项目组的唯一标识
artifactid:
    项目的唯一标识


Qunar 项目文件的包命名：
    源文件包：   com.qunar.业务线.项目组标识  + 文件名(项目标识)
    测试包:      com.qunar.业务线.项目组标识  + 文件名(项目标识)


Pom 文件的介绍
    1.  project 是根源素
        modelVersion  POM 版本
        <parent>    ->  父 POM
        
    2. pom 文件通过坐标 管理项目
        1. groupId       定义属于哪个组，与项目所在的组织或公司有关
        2. artifactId    当前maven项目在组内的唯一ID
        3. version       版本
        4. name           

     3. 项目打包时配置：
        build   :        finalname
        选择相应的环境:     profile 文件
        
 Pom 标签：
    <project>
    <modelVersion>
    
    <parent>
    
    <groupId>
    <artifactId>
    <version>
    <packaging>
    <name>
    
    <properties>
        <java-version>
        <org.springframework.version>       //--------------依赖归类----------
        ...
        <profiles.dir>
    
    <dependencyManagement>
        <dependencies>
            <dependency>
    
    <dependencies>
        <dependency>
    
 
    <profiles>                 
        <profile>                  
            <id>                       .................配置管理，环境配置，重点............
            <build>                    ................profile build .......................
            
    
     <build>                    ................project build 重点.......................
         <defaultGoal>install</defaultGoal>         执行build任务时，如果没有指定目标，将使用的默认值，如：在命令行中执行mvn，则相当于执行mvn install
         <directory>                                build目标文件的存放目录，默认在${basedir}/target目录；
         <finalName>                                build目标文件的文件名，默认情况下为${artifactId}-${version}；         
         <plugin>                                   所有的编译，打包，测试 都是插件支持的
    
 

仓库是什么：
    1. 可以通过maven仓库 对本地和远程的 JAR 包进行管理，在POM中进行管理。使得依赖问题
    更简单清晰的解决。
    2. 在 Idea 中，已经设置了本地仓库的地址，见前面。
仓库布局：
    1. groupid, artifactId, version, artifactid-version.packaging  
    2. 通过上述的 做点对 JAR 包进行定位。



仓库版本：
    1. snapshot   ->   version 添加了 -snapshot 则是指依赖的是 snapshot 版本
    2. release    ->    未填加-snapshot, 
    
    
maven 仓库分类：
    1. 本地仓库
        默认：    .m2/repository/
        修改方式： 
            1.  .m2/settings 文件中进行修改，添加 <localRepository>/home/maven_2016</localRepository>
            2.  idea 中直接设置 
         note: 新设置的本地仓库里面试没有内容的，运行 mvn package 后会将中央仓库的JAR下载到信设置的本地仓库。 
    
    2. 远程仓库
        1. 中央仓库
            maven 配置的默认配置文件在：
            maven安装目录中的 /lib/maven-model-builder-versionNum.jar 中的
            org/apache/maven/model/pom-vsrsionNUm.xml
            在这个文件里标识了中央仓库的地址            
        2. 私服
        3. 其他公共远程仓库
    
    3. 依赖查找顺序: 本地仓库   ->   远程仓库
       引用过的 远程仓库 会下载到本地仓库， 成为本地仓库
    
    
Maven 依赖管理：
    1. 依赖管理结构：
        <dependencies>
            <dependency>
                <groupid>
                <artifaceid>
                <version>

                <type>                 ->     依赖类型， 构建中的packaing ,默认为JAR
                <scope>                ->     依赖范围 
                <optional>             ->      依赖是否可选
                <exclusions>           ->      排除传递依赖
    2. scope：
        1. compile   ->  编译依赖范围， 默认值
        2. test      ->  测试依赖范围
        3. provided  ->  以提供依赖范围，打包的时候不需要使用，目标容器或者JDK已经准备好了
        4. runtime   ->  运行时依赖范围，动态载入的JAR包，编译时不使用。
        
    3. 传递依赖是什么：
        跟字面意思一样
    
    4. 解决依赖冲突， 依赖不同版本的 JAR
        选择原则，但不解决冲突：
            1. 短路经优先
            2. 路径相同，谁先声明谁优先
        解决冲突：
            1. 使用dependencyManagement 设置选择版本，
               在dependencies 里面不用指定版本号了
            2. 使用 excusion, 不推荐使用。用来接触依赖多余。
        
    
    5. 依赖归类
        减少重复性工作， groupid 和 version 相同的情况下，就可以将其再properties里归类成一个常量。
        


maven 聚合与继承
    1. 聚合：
        1. 意义使用一个命令同时构建多个模块
        2. 方法： 父pom中
                <modules>
                    <module>Project1</module>
                    <module>Project2</module>
                </modules>     
                <packaging>pom</packaging>
    2.  继承  
        1. 子pom中
            <parent>
                <artifectid>
                <groupid>
                <version>
            </parent>

私服：
    架设再局域网的一种特殊的远程仓库
maven 测试：
    1. 鼠标放到类文件里面
    2. ctrl+shift+t
    3. 选择测试类
    4. 选择要测试的方法
 
 
 
 规范10 条
    Maven plugin 插件声明???， 插件是什么意思
 
 
 
 
 
 
 
 
 
 
            
            
