MavenStudy
1. 项目管理工具，依赖管理，项目信息管理
2. 控制目录的结构和生命周期
3. pom.xml 是 maven 系统的基本单元

1. 组装PC和品牌PC
2. IDE 不是万能的
3. 不重复再轮子
4. 约定由于配置
    4.1 ArcheType 原型， 结构设计
    4.2 POM 项目对象模型， 对象化



手动创建 maven 项目
    1. 创建目录结构
    2. 创建POM 文件
    3. 创建测试代码
    4. 使用maven命令测试
目录结构：
    1. pom 文件
    2. src 文件夹
        1. main 文件夹
            1. java文件夹
            2. resource 文件夹
        2. test 文件夹
            1. java
            2. resources

测试maven项目 的指令：
    maven  test 
清理编译生成的目录或者文件 指令
    maven clean

手动创建maven项目
    根据文件结构一次创建相应的文件


使用 maven archetype:generate 创建项目

常用命令：
    1. 编译源代码  mvn compile
    2. 编译测试代码  mvn test-compile
    3. 运行测试     mvn test
    4. 打包        mvn package
    5. 在本地 repository 中安装 jar:  mvn install
    6. 在远程仓库中安装 jar ：         mvn deploy
    7. 清除产生的项目                 mvn clean 
    8. 窥探 SuperPom                mvn help:effective-pom, 查看父POM文件
    9. maven 依赖树                  mvn dependency:tree
    10. 打包的时候过滤                mvn clean package -Pdev -Dmaven.test.skip=true
                                        清除   打包并关联Pdev环境(??)  设置过滤
    11. mvn -U clean package -Pbetamagic 
            -Dmaven.test.skip=true
            -DcheckDeployRelease_skip=true
            -Denforcer.skip=false
            -DskipTests enforcer:enforce dependency:tree
            -Dverbose
            
maven test 完成的任务：
    1. 编译源代码
    2. 编译测试代码
    3. 运行测试代码
     
    
maven test-compile 完成的任务：
    1. 编译源代码
    2. 编译测试代码

maven package :
    编译并打包工程，输出再 target 目录下。
    生成的文件和文件夹有：
        classes, maven-archiver, *.jar, surefire, surefire-report, test-classed .
        
maven install：
    将 package 生成的 jar 包部署到本地，输出信息的关键词：  Installing    

            
构建的生命周期：
    定义一组 阶段的序列，每组阶段(即某一个完整的生命周期)定义了目标被执行的顺序，每个阶段是生命周期的一部分。
 maven 构建生命周期：
    maven 构建工程的时候，会按照定义的阶段序列的顺序 执行每个阶段 注册的目标，maven 有3个 标准的 相互独立的 生命周期
        1. clean LifeCycle
        2. default(or build) LifeCycle
        3. site LifeCycle
 
 每个生命周期分为几个阶段
    maven clean:
        1. mvn pre-clean      准备
        2. mvn clean          删除
        2. mvn post-clean     后续工作


default LifeCycle: 共7个步骤, 23个阶段, 执行每个阶段都是有提示输出到屏幕。
    1. mvn pre-resources   准备资源
        复制资源(resource文件下)到target目录下，
    2. mvn compile         编译源文件
        将源文件编译到 target 下的 classes 下， 
    3. mvn test-compile    编译 test 路径下的代码
        只编译 test 路径下的源文件，到 test-classes 文件夹下
    4. mvn test            执行 test 代码
        运行test-classes 下的 文件
    5. mvn package         对编译后的代码进行打包
        将编译好的文件打包到 jar 文件中。
    6. mvn install         将打包后的资源文件部署到本地仓库
        将打包的文件部署到本地仓库
    7. mvn deploy          将打包后的资源文件部署到远程仓库
    
    
site LifeCycle： 分为4个阶段：
    maven站点，项目资源文件和描述文件都放在一个站点之下，其他用户可以通过访问我们的站点对我们的资源进行访问
    开源项目都会有自己的站点，说明项目的 资源和 API 使用方法。
    1. mvn pre-site 
        对工程进行扫描
    2. mvn site
        下载插件，生成 site 相关文件，html描述文件等等,
    3. mvn post-site
        后续文件        
    4. mvn site-deploy， 站点部署，qunar不用，感兴趣访问：
                http://blog.csdn.net/cruise_h/article/details/17188399
        
        
 
 
            
            
