异常被吞; util.log("err",e)
\n :  换行符号 等等，要根据系统变量来编码 

try  catch  finally

Comparable 使用不同的排序方式
Comparator


time 记录格式应该保持原有形式，需要指向专用操作的时候再转变形式。


System.out 的缺点： 
    out.println 流程; 
      1. syschronized(this);      ->>     多线程下同步会造成输出阻塞，造成性能下降。
      2. print();
      3. newline();
    替换为日志输出方式。
      Util.log("");

缓存与缓冲：
    
      
流关闭注意判断流是否存在。

logger.info("x {} y{}", "t1", "t2");   ->>    "t1" 到第一个{}, 

Util类 不应该实例化， 一般是一些静态方法，可以通过声明为 abstract 防止对 Util 类实例化。

注意代码的复用;
   代码抽象:
        

线程安全：
    1. 资源是否是共享的。内部变量就是线程安全的。
    2. 共享的变量有写操作，会有线程不安全的隐患
    加锁： 
        乐观锁： 先执行，出现问题再处理。
        悲观锁： 必须排队。
        加锁力度要小，提高效率。
        同步控制  ->   

内容的呈现：
    数据的结构 要与 数据的呈现方式 两个功能 隔离开
    
    
善用 接口设计 实现代码的复用：
    


静态内部类：
    类内部的逻辑是否需要外界访问，
guava中很多类采用工厂方法新建对象
    屏蔽了实现细节，简化构造的流程

WeakReference<Integer> weak = new WeakReference<Integer>(100);    ->>   1000
System.gc();
Thread.sleep(1000L);
out.println(weak.get());


领读部分代码：
    Joiner , Optional, HashMap, 
    HashMap: 
        扩容如何实现，扩容对性能的影响
    guava:
        
    优秀框架：
        spring IOC 存储代码
        guava 代码
        jdk 并发原发实现
        lockback 日志框架
        apache commends 库
        PC部 : 
   
Map: 遍历方法：
    entry set;
    key set;
    value set;
    



java file.java       ->    file.class
javap - verbose file    ->     


中文乱码问题：
      指定博客：  http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html
        
   

obj = Class.forname()    //----------------利用反射获得的类。
method.invoke(obj, dateFormat.parse(value));

Map<Class, property> classMap = new weakMap()

xml解析
    ：SAXParse;
    : Dom 
    
接口，类，抽象，注入，反射，


第二期：5-10, 20 作业题目


根据 行为 针对的内容 确定 方法是否应为 static
    购物车内部计算和 订单添加和删除 
访问修饰符：
    private,  protect, public,

远程资源的读取：
    异步：读取资源的类型
    同步：阻塞读取
guava 异步编程:
    filter， listen ,


内部类
    
范型接口, 范型类 的使用

注解：
    不管多高端，就是一个注释，
    java 默认注解，这些注解都是可以查看源码的：
          @Override:只能用在方法之上的，用来告诉别人这一个方法是改写父类的。
          @Deprecated:建议别人不要使用旧的API的时候用的,编译的时候会用产生警告信息,可以设定在程序里的所有的元素上.
          @SuppressWarnings:这一个类型可以来暂时把一些警告信息消息关闭.
    
    java 自定义注解：
          1. 通过@interface关键字声明注解名称，以及注解的成员属性或者叫做注解的参数。    
          2. 使用java内置的四个元注解对这个自定义标注的功能和范围进行一些限制， 元注解：@Target,@Retention,@Documented,@Inherited 
                @Target 表示该注解用于什么地方，可能的 ElemenetType 参数包括
                @Retention 表示在什么级别保存该注解信息。
                @Documented 将此注解包含在 javadoc 中 
                @Inherited 允许子类继承父类中的注解 
          3. 实例：
                   @Target(ElementType.TYPE)//这个标注应用于类
                   @Retention(RetentionPolicy.RUNTIME)//标注会一直保留到运行时
                   @Documented//将此注解包含在javadoc中
                   public @interface Description {           // 我们自定义的注解，包含一个 string 
                       String value();
                   } 
                   
                   @Target(ElementType.METHOD)
                   @Retention(RetentionPolicy.RUNTIME)
                   @Documented
                   public @interface Name {                  // 我们自定义的注解，包含两个 string 
                       String originate();
                       String community();
                   }
          4.  代码中使用注解：
                @Description(value="javaeye,做最棒的软件开发交流社区")  ->  注解赋值
                @Name(originate="创始人:robbin",community="javaEye")  ->  注解赋值
                Description des = (Description)test.getAnnotation(Description.class);     ->  获取对类实例 test 的 Description 的注解 
                System.out.println("描述:"+des.value());
        
          5. 链接 http://yuxingxing1988.iteye.com/blog/1605748
        

源码解析
    public static <F, T> List<T> transform(List<F> fromList, Function<? super F, ? extends T> function) {
            return (List)(fromList instanceof RandomAccess?new Lists.TransformingRandomAccessList(fromList, function):new Lists.TransformingSequentialList(fromList, function));
    }
        1. static -> 静态函数 
        1. <F,T>  ->  代表两个范型
        2. List<T>  ->  返回类型
        3. transfrom   ->  函数名
        4. List<F> fromList   ->  输入 list<F>
        5. Function<? super F, ? extends T> function   
            ->   Function ,  俩个参数，super F, extend T
        6. fromList instanceof RandomAccess   ->  判断 fromlist 的特性，调用相应的类进行初始化
        7. lazy  ->  懒执行方式 
    

        8.public T get(int index) {
            return this.function.apply(this.fromList.get(index));
        }
        9. //   懒执行方式：初始化只是对 类中的变量进行赋值， 再迭代的时候才进行转换 
        private static class TransformingRandomAccessList<F, T> extends AbstractList<T> implements RandomAccess, Serializable {
                final List<F> fromList;
                final Function<? super F, ? extends T> function;
                private static final long serialVersionUID = 0L;

                //  初始化只 赋值，变量赋值， 处理器赋值。
                TransformingRandomAccessList(List<F> fromList, Function<? super F, ? extends T> function) {
                    this.fromList = (List)Preconditions.checkNotNull(fromList);
                    this.function = (Function)Preconditions.checkNotNull(function);
                }

                public void clear() {
                    this.fromList.clear();
                }

                public T get(int index) {
                    return this.function.apply(this.fromList.get(index));
                }

                public Iterator<T> iterator() {
                    return this.listIterator();
                }

                //  进行迭代时才进行元素值的转换
                public ListIterator<T> listIterator(int index) {
                    return new TransformedListIterator(this.fromList.listIterator(index)) {
                        T transform(F from) {
                            return TransformingRandomAccessList.this.function.apply(from);
                        }
                    };
                }
                ...}
           9. 调用：lazy 方式试异步转换。！！！！！！！！！！有坑。
                List<Interger> inputListInt;
                Function<Interger, String> funcI2S = new Function(){}
                List<String> xx = Lists.transform(inputListInt, funcI2S)
           10. 注意问题：
                    http://blog.csdn.net/mnmlist/article/details/53870520  ->   坑详解


范型编程：  http://blog.csdn.net/huojiao2006/article/details/53996392
        1. 范型 接口
            1. 定义
                public interface tmpInterface2<I,O> {
                        O run(I input);
                    }
            2. 实现
                public class InstanceClass implements tmpInterface1<String,Integer> {
                        @Override
                        public Integer run(String input) {
                            return null;
                        }
                    }         
        2. 范型方法：
            1. 定义方式：
                public static  <I,O> O out(I t) {
                    System.out.println(t);
                    return (O)"OK";
                    }
            2. 调用：
                String x = this.out("xx")



