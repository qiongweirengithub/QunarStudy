异常被吞; util.log("err",e)
\n :  换行符号 等等，要根据系统变量来编码 

try  catch  finally

Comparable 使用不同的排序方式
Comparator


time 记录格式应该保持原有形式，需要指向专用操作的时候再转变形式。


System.out 的缺点： 
    out.println 流程; 
      1. syschronized(this);      ->>     多线程下同步会造成输出阻塞，造成性能下降。
      2. print();
      3. newline();
    替换为日志输出方式。
      Util.log("");

缓存与缓冲：
    
      
流关闭注意判断流是否存在。

logger.info("x {} y{}", "t1", "t2");   ->>    "t1" 到第一个{}, 

Util类 不应该实例化， 一般是一些静态方法，可以通过声明为 abstract 防止对 Util 类实例化。

注意代码的复用;
   代码抽象:
        

线程安全：
    1. 资源是否是共享的。内部变量就是线程安全的。
    2. 共享的变量有写操作，会有线程不安全的隐患
    加锁： 
        乐观锁： 先执行，出现问题再处理。
        悲观锁： 必须排队。
        加锁力度要小，提高效率。
        同步控制  ->   

内容的呈现：
    数据的结构 要与 数据的呈现方式 两个功能 隔离开
    
    
善用 接口设计 实现代码的复用：
    







