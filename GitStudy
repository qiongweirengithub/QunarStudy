1. git 分布式版本控制系统
2. 寻找某一时刻，某一文件内容快照，和内容还原
3. 集中式的版本控制系统和分布式
4. 分布式的版本控制系统： 将中央服务其的文件完整的复制，可以离线的进行个个时刻版本的对比。
5. git 通过分支进行开发
6. git 本地仓库，操作离线在本地完成，共享代码的时候才需要将内容推送到服务器
7. 版本号：git 根据文件的内容 使用 hash 生成相对应的 版本好， 保证文件内容的完整性


Git 三种状态：
  《已修改modified》   ->add->   《已暂存staged，生成快照》  ->commit->   《已提交commited》 
       工作区                          暂存区                               本地仓库       <--->  远程仓库

工作区    ->  某一时刻的文件快照，

暂存区    ->  存放下次将要提交的文件快照

本地仓库   ->  保存项目的元数据和对象数据库的地方，clone 和 推送的时候用到的就是仓库


开发流程：
  1. 创建仓库/远程克隆仓库
  2. 常见分支并切换到特定分支
  3. 创建/修改文件
  4. 提交工作区文件到暂存区
  5. 提交暂存区文件到本地仓库
  6. 切换到主干分支
  7. 合并特定分支到主干分支
  
git diff          ->   工作区文件与暂存区文件的不同
git diff staged   ->   暂存区文件与上次commit的文件(本地仓库)的区别
git diff branch1 branch2   ->  两个分支上最新的提交做比较
更多介绍：
  http://www.cnblogs.com/wish123/p/3963224.html
  
 
 
ssh 登录git：
 
 
git status :
    查看未追踪(未提交)的文件

vim  .gitignore 
    设置不需要追踪的文件
    
    
    
    
mkdir gittest
cd gittest
git init
git remote add origin <url>

git remote remove origin    ->  解除关联

git remote -v :
    查看关联关系
    

查看帮助   
    git remote --help



git status    ->  跟踪每个文件的状态， 
git log       ->  只记录 提交(commint)日志，远程与本地都会记录这个 commit 日志 
git reflog    ->   所有日志, 只记录在本地



git config --add user.name qiongwei.rem
git config --add user.email qiongwei_ren@163.com
查看配置：
  git config -e  查看config 内容
增加上面的两句话可以切换  reflog 的 author 信息








  







