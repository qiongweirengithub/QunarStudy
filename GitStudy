1. git 分布式版本控制系统
2. 寻找某一时刻，某一文件内容快照，和内容还原
3. 集中式的版本控制系统和分布式
4. 分布式的版本控制系统： 将中央服务其的文件完整的复制，可以离线的进行个个时刻版本的对比。
5. git 通过分支进行开发
6. git 本地仓库，操作离线在本地完成，共享代码的时候才需要将内容推送到服务器
7. 版本号：git 根据文件的内容 使用 hash 生成相对应的 版本好， 保证文件内容的完整性


Git 三种状态：
  《已修改modified》   ->add->   《已暂存staged，生成快照》  ->commit->   《已提交commited》 
       工作区                          暂存区                               本地仓库       <--->  远程仓库

工作区    ->  某一时刻的文件快照，

暂存区    ->  存放下次将要提交的文件快照

本地仓库   ->  保存项目的元数据和对象数据库的地方，clone 和 推送的时候用到的就是仓库


开发流程：
  1. 创建仓库/远程克隆仓库
  2. 常见分支并切换到特定分支
  3. 创建/修改文件
  4. 提交工作区文件到暂存区
  5. 提交暂存区文件到本地仓库
  6. 切换到主干分支
  7. 合并特定分支到主干分支
  
git diff          ->   工作区文件与暂存区文件的不同
git diff staged   ->   暂存区文件与上次commit的文件(即本地仓库)的区别
git diff branch1 branch2   ->  两个分支上最新的提交做比较
更多介绍：
  http://www.cnblogs.com/wish123/p/3963224.html
  
 
 
ssh 登录git：
    1. 产生公钥： ssh-keygen   ，一路回车，产生公匙文件       ->   无空格
    2. cat 公匙文件， 复制公匙码
    3. gitlab   ->   SSH KEYS   ->   ADD SSH KEY  ->  将公匙码复制进 key 栏中。
    4. git push --set-upstream origin newBranchSSH                             ........设置远程的仓库地址
    
    执行下面的操作就不需要每次输入账户密码了。
    5. git clone ssh-url
    6. git push.
 
git status :
    查看未追踪(未提交)的文件

vim  .gitignore 
    设置不需要追踪的文件
    
    
    
    
mkdir gittest
cd gittest
git init
git remote add origin <url>

git remote remove origin    ->  解除关联

git remote -v :
    查看关联关系
    

查看帮助   
    git remote --help



git status    ->  跟踪每个文件的状态， 
git log       ->  只记录 提交(commint)日志，远程与本地都会记录这个 commit 日志 
git reflog    ->   所有日志, 只记录在本地



git config --add user.name qiongwei.rem
git config --add user.email qiongwei_ren@163.com
查看配置：
  git config -e  查看config 内容
增加上面的两句话可以切换  reflog 的 author 信息



git push -u origin branch2    
    ->  branch2 设置为 追踪 来自origin 的 branch2 分支 , 设置后只需要运行 git push 即可
    ->  注意 origin 代表的是 远程分支的地址，见remote
   
 


从远程到本地的 ：
  git pull                   ->   拉取远程仓库到本地仓库，并合并到本地分支，是 git fetch 和 git merge 的组合
  git fetch                  ->   拉取远程仓库到本地仓库;  ->origin/branch2
  git merge origin/brach2    ->   将本地仓库合并到本地分支;



git checkout master          ->  切换到 master 分支
git merge branch2            ->  将 branch2 和并到 当前工作分支(master)



 push 冲突应该做的几件事情：
  1） 先修改冲突，再提交
      1. git pull   ->  提示冲突
      2. 查看冲突文件，修改冲突，然后执行 commit -> push
  2） git status 查看文件状态
  3） git merge --abort 取消此次合并。
  
  
git branch  - 查看 查看branch
git branch newBranch  -> 创建 branch
git checkout someBranch  ->  切换到某个branch 

特殊用法：
  修给了一个 工作区的文件(hello.py), 可以通过 git checkout --hello.py 将暂存区的文件拉回来。
  使用 checkout 还可以还原到某一个版本的某一个状态
    1. 查看 git log , 得到我们需要的版本号 hash 码。
    2. git checkout <hashcode> hello.py
    3. git checkout HEAD hello.py   返回到最近的一次提交
    4. git checkout HEAD～2 hello.py   返回到最近的一次提交
    
 
 git reset   ->  重置 HEAD 到指定的状态 
    1. git reset --mixed HEAD~     ->   将最早的 commit 的本地仓库版本 复制到 暂存区，覆盖 ，默认的方式！！！
    2. git reset --hard HEAD~      ->   将最早的 commit 的本地仓库版本 复制到 暂存区和工作区，覆盖
    3. git reset --soft HEAD~      ->   将 HEAD 指向最早的commit 的本地仓库版本， 但不往暂存区和工作区复制
    
    

git revert     ->  撤销已经存在的一些提交(commit)
    git revert <hashcode>              ->    会将 revert 作为 commit 保存起来，也不会覆盖之前的记录
    git reset  --hard <hashcode>       ->   抹去之后的 commit 记录
    
    
    
git cherry-pick 用于把某次提交的内容合并到当前分支，可以针对单个文件的 commit 进行修改
   应用场景：
      执行了 多次 commit , 每次都对应于 一个 hashcode, 但是并不想更新所有的 commit 到某个分支上，执行 push 更新，
      可以使用  git cherry-pick <hashcode> 只合并某一个版本到当前分支上。
      

git rebase 用于把一个分支的修改合并到当前分支

  








 
