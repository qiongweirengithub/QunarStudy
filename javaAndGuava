java 平台平台： java 语言，JVM ，类库。
java 源代码， 字节码， JVM解释执行
一次编码，多处执行

不同与c++
  1. 内存管理
  2. 反射
  3. 完全的面向对象
学习重点：
  Git
  Maven
    项目管理工具， 类是与 make 工具
  Shell , vim , emacs
  web 开发
    Servlet规范
    HTTP 协议
  第三方类库：
    Guava, Apache Commons
  公司使用的框架：
    Spring,
    Mysql, PostgreSql, Mybais(ORM)
    Dubbo(系统通信,运维方便)
    日志： Slf4j+logback
  QMQ：
    消息队列，中间件
  Qscahedule
    任务调度中心
  Qconfig
    统一配置中心


基础数据类型：
  String , StringBuild 的源码，
  8 数据类型
从下面几个方面介绍 数据类型
  box & unbox 
  interger 中的缓存
  数值比较和溢出问题
  NPE 问题 null point error
  溢出：
    long millisOfYear = 5000 * 3000 * 44 * 123 ;  -> 溢出 
    long millisOfYear = 5000L * 3000 * 44 * 123 ;  -> 正常
  NPE：
    Interger a=null;
    Interger a=a.Intvalue(); -> 错误
  精度的丢失：  
    println(new BigDecimal(0.58))   ->    0.579999
    
    正确的构造方式：
       BigDecimal a = new BigDecimal.valueof(0.580);   ->  回去掉最后的 0
       BigDecimal b = new BigDecimal("0.580")
       数值比较：
        a.equals(b)   ->  false
        a.compareTo(b)  ->  true
        指定算法精度：
          a.divide(b, MathContent.DECIMAL64);
          
  StringBuilder
      StringBuilder append：
          StringBuild 与 StringBuffer 继承 AbstratStringBuilder ,
                                      impliments java.io.Serializable;
                                      StringBuffer 中 包含 syschronized,多线程安全
                                      StringBuilder 没有加锁，效率更高。
          
      StringBuilder 扩容 ：
          在 append 调用自动扩容的代码，函数在AbstratStringBuilder 中的 ensureCapacityInternal();
          
      String guava 提供
          String.isNllorEmpty()
          String.nullToeEpty()
          commomSuffix(a,b);
          commomPreffix(a,b);
          String.paddStart(a, 5, '*');
          String.paddEnd(a, 5, '*');
     Ints:  guava 提供
        补充Interger 和 Arrays  中对 int 类型的操作;
        常用方法：
          Ints.compare(a,b);
          asList;
          Ints.contains(arrayA,1);
          max; min;
          
          JDK:
            Arrays.asList();  ->  返回 List, 元素是数组List<int []>。。
          guavas:
            Ints.asList();    ->  返回List, 元素是 List<Int>, 不可变！！！， 没有add方法
      Joiner: guava 提供
          List<Integer> a=List.newArrayList(1,2,5);
          logger.info("join result {}", Joiner.on("|").join(a));  - >  a 中不能有null
          logger.info("join result {}", Joiner.on("|").skipNull().join(a));  - >  a 中有null
          logger.info("join result {}", Joiner.on("|").useForNull("7").join(a));  - >  a 中有null
          
          使用Joiner 链接一个 Map 
            Map<String, String> para = Maps.newHashMap();
            para.put("name", "qiongweiren");
            para.put("id", "0");
            String queryString = Joiner.on("&").withKeyValueSeparator("=").join(para);
            
       Splitter: guava 提供
          用于将字符串按照某个 separator 分割成List 或者 Map; Immutable/ThreadSafe
          Splitter 和 MapSplitter 的基本用法;
          String string = ", a ,b ,";
          String regexSplit = string.split(",")                                ->    输出是[, a ,b ]
          List<String> guavaSplit =   Splitter.on(",").splitToList(string)   ->    输出是[, a ,b ,]
          List<String> guavaSplit =   Splitter.on(",").trimResult().splitToList(string)   ->    输出是[,a,b,]
          List<String> guavaSplit =   Splitter.on(",").trimResult().omitEmptyString().splitToList(string)   ->    输出是[a,b]
          
          String querystring = "a=1&b=2";
          Map<Srring, String> split = Splitter.on("&").withKeyVauleSeparator("=").split(queryString);
          
      Objects:guava 提供
          操作 Object 的辅助类
              equls:
                  JDK ：
                    String a = null;
                    String b = null;
                    a.equals(b)      ->  a 为 null 时 会抛出错误，b 没影响。
                  guava:
                    Objects.equal(a,b) -> 不会 
              hashCode
                  Object.hashCode(1,2);
              toStringHelper
              firstNonNull
              
   
        
       CharMatcher: guava提供
          CharMatcher charmatcher = CharMatcher.anyOf("abcd"); ->  'a', 'b','c','d';
          String newstr  = charmatcher.reomovefrom(str);
          String newstr  = charmatcher.retainfrom(str);
          CharMatcher charmatcher = CharMatcher.anyOf("abcd").or(CharMatcher.is('2'));
          
          Splitter.on(",").trimResult(CharMatcher.is('a')).splitToList(str)

        Optional:
            1. 作为方法的返回值，
              1. String process();
              2. Optional<String> process();   ->  调用方明确知道返回值可能不存在
                    return a>0 ? Optional.<String>absent() :  Optional.of("xxx");
                    result.isPresent();
            2. 作为默认值的设置
              Integer a = Optional.fromNullable(b).or(0);
            

        Fucntion: guava 
            Function 定义的函数 ->  接受一个输入参数，转换为另一个结果。
              Function<Interger,String> iotoString = new Function<Interger, String>()
              {
                Public String apply(Interger input)
                {}
              }
              
              String x = iotoString.apply(5);     ->    
              
            Predicate 定义的函数 p_func ->  判断参数是否满足一定的条件, 
              Predicate<Interger> greaterThan5 = new Predicate<Interger>(){
                 public boolean apply(Interger input)              
              }
              
              out.println(greaterThan5(10));
              
              
      String 的 intern 
      String 的 Interners  ????
      
      
      
      Lists  ->  guava 提供
      我们还可以将两个（或三个）类型相同的数据存放在一个list中，这样可以传入到只有一个参数的函数或者需要减少参数的函数中，这些函数如下：
      List<E> x = Lists.asList(@Nullable E first, E[] rest)
        Lists.asList(@Nullable E first, @Nullable E second, E[] rest)
      
      
      
      
 Joda-Time
      见工程测试代码
 
 异常处理：
    如何处理程序中出现的错误或者异常
    1. 返回值方式处理异常
    2. 异常机制
        1. Throwable
          1.1 Error     ->  不用catch 这种
          1.2 Exception
            1.2.1 RuntimeException    ->    非受检查异常，可以不catch.
            1.2.x ...                 ->  受检查异常 -> catch 或者 throws声明
    
    3. 异常方法：
        1. Exception.getMessage
        2. Exception.getCause
        3. Exception.printStackTrace  -->  不奥要执行这句
        4. Exception.getStackTrace , 需要统计堆栈数据
    4. 异常处理：
        捕获异常：
          try{}catch(){}finally{}
          
    5. guavas 异常处理：
        工具类：Throwables:
            getCausalChain  ->  异常链
            getRootCause    -> 得到最原始的异常，最早的Throw点
            propagate       ->  将 Exception 包装成 RuntimeException  或则和error,简化异常处理
            getStackTraceAsString    ->   以String 的方式返回错误的信息
            
    
日志：
    slf4j  
            面向接口，只提供日志系统的接口
            实现层 调用原生实现接口 或者通过适配层调用其他其他日志库的方法来实现
            能适配多种不同的日志框架，实现日志的统一配置和管理
    lockback:
            slf4j 接口的原生实现，非通过适配层
            logback: Logger, Appender, Layout
              1. LOgger         -> 产生日志事件，可配置级别
              2. Appender       ->  将日志事件代理到具体的日志记录组建
                    1. DBAppender ->  日志事件记录到数据库
                    2. FileAppender    ->  日志事件记录到文件中
                    3. RollingFIlAppender -> 将日志按照一定的策略进行分割存储
                    
              Layout             ->    将日志时间格式化为具体的日志记录：
                    1. HTMLLayout    ->  输出为HTML
                    2. PattrernLayout   ->  根据配置的Pattern 格式化日志事件
                    
     日志级别：
          trace,< debug< info< warn< error
          
          配置级别的方法：
            <logger name="hotel.order.log" level="debug">   ->  包名
                  <append-ref ref="file" />
            </logger>
              
     使用占位符代替字符串拼接
     
      Logger.error("error occurred reason{}. stack{}", e.getMessenge(), e);   
            ->  错误，最后 e 是Throwable,所有 Throwable 会在占位父判断完之后进行输出。不能够放到占位符里面
            
代码规范：
  类名： 形容词或者 形容词
  方法名 ： 动词
  使用恰当的词标识方法背后的动作
  
  接口：
    通信协议，意义要明确
    职责单一，接口数据的组合尽量放到调用方完成
    接口实现需要严格的遵循接口规范,尽量不要做隐形约定(默认值)
    返回容器的地方不要返回null, 返回空的容器
    RPC接口返回java原生容器，不免使用第三方库提供的容器
  注释：
    javadoc 格式编写的注释
    接口的注释，参数，返回值，调用频率限制，使用说明
    
 
 
 Jdk collentions:
 
    继承于 collection  ->  定义接口
        list  ->   定义接口
          arraylist   ->  实现
          linklist    ->  实现
        set     -->  定义接口
          hashset 
          lindedset
          treeset
          
    map:      ->   定义接口
      haskmap
      linedmap
      treemap
    
    
    List 扩容 ->   1.5 倍
    for(String x:strngList)
    {
      stringList.add("x")       ->   exceptuion
    }
    
    for(Iterator<String> iter=StringList.iterator;)
    {
      StringList.add("xx")        -》  succed.
    }
    
    
    jdk Collections
      emptyList/emptySet/emptyMap   >  创建 空对象
      singleton/singletonList     ->   创建的对象不可写
      binarySearch(ListObj)
      shuffle(ListObj)              ->  打乱
      
      sort(list, new comparator<>(){
        @overwrite
        public int compare(o1, o2)
        {return o1.pro>o2.pro}
      })
      
      
      Ordering.natural().reverse()      ->    guava
        1.      Collection..sort(list, Ordering.natural().reverse())
        2.      list = Ordering.natural().reverse().sortedCopy(List)
        3.      Collection..sort(list, Ordering.natural().reverse().onResultOf(
                                                                                new Function<typein,typeout>
                                                                                {
                                                                                  @Nullable
                                                                                  @Overwrite
                                                                                  public Integer apply(@Nullable String input)
                                                                                    {
                                                                                      return input.length;
                                                                                    }      
                                                                                }
                                                                                ) 
                                )
    hashMap:
        1. Capcity  default 16
        2. load Factor   default 0.75
        3. 避免扩容：
           guava: Map.newHashMapWithExpectedSize()
    
    LinkedHashMap:    extend HashMap
       增加：
        1. table  ->   HashMAP
        2. accessOrder  
            false: 非顺序访问
            true:  顺序访问
        3. header ->  增加的指针，after,before,next, value    
        
    TreeMap:  
        1. 用红黑树来实现的，会定义一个 comparetor
    
    EnumMap:
   
   
    Map 是非线程安全的
        put: 会改变 Map 大小
        read: 会判断大小是否变化，变化话抛出异常
    线程安全的：    
            1. Collection 提供了一个  SynchroizedMap  ,初始化会传入 mutex, 所有操作都会对其进行加锁，效率会较少
                Map<String, Integer> synchronizedmap = Collections.synchronizedMap(new HashMap<String, Integer>());
                
            2. ConcurrentHashMap  -> 对hashmap 拆成很多的块， 对块进行加锁
                Map<String, Integer> concurrentHashMap = new ConcurrentHashMap<String, Integer>();
                
                
     Set      
      1. 基于hashMap:
          HashSet
          LinkedSet
          TreeSet
        
        EnumSet 创建:根据输入的大小创建下面两种： 按 bit 存储
            元素个数<64:返回
              RegularEnumSet
            元素个数>64：返回
              JumboEnumSet
        
  JDK 容器与guava容器
  JDK容器：
    常用容器：ArrayList, LinkedList, HashSet, HashMap
      无法提供某种场景需求，
            Map 1-1, 不能1-n. 
            Key->value ,无法 value->key, 
            UnmodifiableXX 问题
            用法繁琐
            
   guava :
      工厂方法：
        List.newArrayList();  ->  空Arraylist
        List.newArrayListWithCapacity(int)

      asList/asSet/asMap     ->  返回的是 视图， 原容器变化回影响这些方法返回的容器内容
      常用工具类：
        集合操作：
          List.reverse/transform/partion
          Sets.filter(setInt, 
                      new Predicate<Integer>(){
                        @overwrite
                        public boolean apply(@Nullable Integer input)
                                  {return input>2;}
                      }          
          )
          
          Sets.intersection/union/difference/powerSet/cartesianProduct
          
          Maps.filterKeys/filterValues/filterEntries
          Maps.transformValues/transformEntries
          Maps.difference
          Maps.fromProperties  ->  从Properties文件中构造一个 不可修改 Map
          Maps.uniqueIndex(Iterable, Function)  ->  以某一属性未index,构造一个Map,例如
                                                    从数据库中读取一批数据，数据的
                                                    某一个有唯一索引的列建立MAP
                                                    
          
          迭代器：
            遍历容器 或者 改变容器 内容的接口
            
            
            
         guava 新容器：
            MultiSet   ->>   允许出现不同的元素，且不存在顺序，？？介于set与list之间
            MultiMap    ->   
                Multimap<String, String> multimap = HashMultimap.create();
                multimap.put("a","a_value1");
                multimap.put("a","a_value2");
                multimap.put("a","a_value3");    ->  有 “a_value1, a_value2, a_value3”

                HashMap<String ,String> singleMap = new HashMap<String, String>();
                singleMap.put("a","a_value1");
                singleMap.put("a","a_value2");
                singleMap.put("a","a_value3");  ->   只有 “a_value3”



              ImmutableXXX 不可变的容器
                  1. Collections.unmodifiableList 
                      返回的是 原来容器的视图，
                      通过这个视图是无法修改 原容器内容的，
                      不代表原容器不可修改,
                      原容器的修改会影响到得到的视图。？？？ 与原容器内容的修改的区别。。。。add 会变， 任何对原容器修改都会变
                      
                  2. guava 提供的 immutableXXX
                      1. 返回的容器(视图)不可修改
                      2. 原容器的修改不会影响 视图的内容 ，原容器内容修改会影响返回的容器内容，add 不会变 ，但是对原先的元素修改会影响
                      3. 线程安全
                      4. 对不可靠的客户代码库来说，它很安全，可以在未受信任的
                          类库中安全的使用这些对象。
                          
                      5. 节省内存和时间开销
                      6. 可以被使用未一个常量，并且再未来也保持不变
                      7. 原理：
                          1. 返回原容器，而不是原容器的视图
                          2. add 或者 set 直接抛出异常
                          
                    
              BiMap
                1. jdk key->vakue,不能根据value->key
                2. BiMap ->  互相查询
                    BiMap.get              ->     key  -> value
                    BiMap.reverse().get    ->     value -> key
                    
             
              RangeSet/RangeMap
                
                RangeSet<Interger> rangeset = TreeRangeSet.create();
                rangeset.add(Range.closed(1,10));
                
                RangeMap<Interger, String> rangmap = TreeRangeSet.create();
                rangmap.put(Range.closed(0,10), "abc");

              AtomicLongMap
                任意类型的Key 到 长整形数 之间的映射，
                
      Guava 缓存：
          1. 数据库的访问请求过多造成数据库的压力过大
          2. 读取分库
          3. 加入中间的缓存
          4. 实例：搜索缓存，2. DNS 缓存， Mysql 内部的缓存
          5. 如何设计一个组件实现代码中对数据的缓存
            1. 数据结构
                常用 hash 表，get put
            2. 容量
            3. 有效期
            4. 清理策略
                 LRU/FOFO/LFU
            5. 缓存统计相关指标
           
          6. guava 缓存，
             1. 缓存的结构类似于 concurrentMAP 支持高并发，没有性能担心，但是不会自动移除过期的内容
             2. guava Cache 容器， 使用简答，线程安全，可以自动加载，定时更新，LRU 清理, key/value支持多种引用类型，缓存移除监听。
                2. LoadingCache<String, testObj> LoadingCache = CacheBuild.newBuild()
                              .maximumSize(1000)
                              .expireAfterAccess(30, IimeUnit.MIMUTES)
                              .refreshAfterWrite(10, TimeUnit.MIMUTES)
                              .removalListener(
                                    new RemovalListener<String, testObj>(){}
                              )
                              .build(
                                    new CacheLoader<String, testobj>(){           //缓存刷新方法
                                        @Override
                                        public tetsObj load(String key) throws Exception
                                        {return fetchFromDB(key)}
                                    }
                               )
                          LoadingCache.get(key);
                          LoadingCache.put(key, testObj)
                          
             3. 并没有放到文件中，应用重启缓存丢失，不能持久化，受内存限制，缓存不一致等缺点，
      Redis:
        K/V NoSQL
        数据在内存
        支持多种数据结构
        可持久化
        高性能，高可靠
        支持主从复制， 事务。
        可以通过公司提供的 jar 包操作 Ridis
 
 IO:
  java IO
      1. 基于流的输入输出方式
        1. 按顺序，不能跳
      2. input
        1. 字节流 inputStream
        2. 字符流 inputReader
      3. output
        1. 字节流 outputStream
        2. 字符流 outputputWrite        
  guavan IO
      1. 更高抽象
      2. 更方便的工具类
      3. 
        ByteStream  ->  字节流
        CharStream  ->  字符流
            File file = new File(path)
            //----------------------------不用循环直接读取所有内容-----------
            List<String> lines = CharStream.readLines(new FileReader(file));
            //?? ---------------------------依然需要关闭流???流在哪里？
        Files 
            //---------------------------不用捕获异常-----------------
            List<String> lines = Files.readLines(new FileReader(file), endingType);
            
        Resources
            //---------------------------不许补货异常----------------------
            List<String> lines = Resources.readLines(url, endingType);
        
        源 于 汇：
            1. 对File, Url, byte[]  抽象为一类数据
            2. ByteSource, CharSource  ->  读取
                Files.asCharSource(new file, encoding);
                Resources.asCharSource(new file, encoding);
            3. ByteSink, CharSink      ->  输出
            
            
            
        
        
  
  
  
  
  
  
  
  
  
  
  
  
    
